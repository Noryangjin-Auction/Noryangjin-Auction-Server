#!/bin/bash

# ==============================================================================
# Master Orchestrator v8.0 - Agent Autonomous Mode
# ==============================================================================

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

PLAN_FILE="./PLAN.md"
TDD_SCRIPT="./run_tdd_cycle.sh"
VALIDATE_SCRIPT="./validate.sh"
BASE_BRANCH="develop"

# --- Helper Functions ---
find_next_task() {
    local task_block=$(awk '
        /^- \[ \] \*\*Task/ {
            found=1;
            block=$0;
            next
        }
        found && /^  - / {
            block=block"\n"$0
        }
        found && /^- \[/ {
            exit
        }
        found && /^$/ {
            exit
        }
        END {
            if (found) print block
        }
    ' "$PLAN_FILE")

    if [ -z "$task_block" ]; then
        return 1
    fi
    echo "$task_block"
}

mark_task_complete() {
    local task_id=$1
    local escaped_id=$(echo "$task_id" | sed 's/\./\\./g; s/-/\\-/g')

    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s/^- \[ \] \*\*Task ${escaped_id}:/- [x] **Task ${task_id}:/" "$PLAN_FILE"
    else
        sed -i "s/^- \[ \] \*\*Task ${escaped_id}:/- [x] **Task ${task_id}:/" "$PLAN_FILE"
    fi

    if grep -q "^- \[x\] \*\*Task ${task_id}:" "$PLAN_FILE"; then
        echo -e "${GREEN}‚úÖ Task ${task_id} ÏôÑÎ£å ÌëúÏãú${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Ï≤¥ÌÅ¨Î∞ïÏä§ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®${NC}"
        echo "ÎîîÎ≤ÑÍπÖ: Task ID = ${task_id}"
        grep "Task ${task_id}:" "$PLAN_FILE" || echo "TaskÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå"
    fi
}

rollback_task_completion() {
    local task_id=$1
    local escaped_id=$(echo "$task_id" | sed 's/\./\\./g; s/-/\\-/g')

    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s/^- \[x\] \*\*Task ${escaped_id}:/- [ ] **Task ${task_id}:/" "$PLAN_FILE"
    else
        sed -i "s/^- \[x\] \*\*Task ${escaped_id}:/- [ ] **Task ${task_id}:/" "$PLAN_FILE"
    fi
}

create_feature_branch() {
    local task_id=$1
    local feature_branch="feat/${task_id}"
    local current_branch=$(git branch --show-current)

    if [ "$current_branch" = "$feature_branch" ]; then
        echo -e "${BLUE}‚ÑπÔ∏è  Ïù¥ÎØ∏ ${feature_branch} Î∏åÎûúÏπòÏóê ÏûàÏäµÎãàÎã§${NC}"
        return 0
    fi

    if ! git rev-parse --verify "$BASE_BRANCH" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå ${BASE_BRANCH} Î∏åÎûúÏπòÍ∞Ä ÏóÜÏäµÎãàÎã§${NC}"
        echo -e "${YELLOW}üí° git checkout -b ${BASE_BRANCH} Î™ÖÎ†πÏúºÎ°ú ÏÉùÏÑ±ÌïòÏÑ∏Ïöî${NC}"
        exit 1
    fi

    echo -e "${CYAN}üåø Î∏åÎûúÏπò ÏÉùÏÑ±: ${feature_branch} (from ${BASE_BRANCH})${NC}"

    git checkout "$BASE_BRANCH" 2>/dev/null
    git pull origin "$BASE_BRANCH" 2>/dev/null || true

    git checkout -b "$feature_branch" 2>/dev/null || git checkout "$feature_branch" 2>/dev/null
}

show_pr_instructions() {
    local task_id=$1
    local requirement=$2
    local feature_branch="feat/${task_id}"

    echo -e "\n${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}‚úÖ Task ${task_id} Íµ¨ÌòÑ ÏôÑÎ£å!${NC}"
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e ""
    echo -e "${CYAN}üìã Îã§Ïùå Îã®Í≥Ñ:${NC}"
    echo -e ""
    echo -e "  ${YELLOW}1.${NC} PR ÏÉùÏÑ± Î∞è ÏΩîÎìú Î¶¨Î∑∞"
    echo -e "     ${BLUE}Î∏åÎûúÏπò:${NC} ${feature_branch} ‚Üí ${BASE_BRANCH}"
    echo -e "     ${BLUE}Ï†úÎ™©:${NC} feat: Task ${task_id} - ${requirement:0:50}..."
    echo -e ""
    echo -e "  ${YELLOW}2.${NC} GitHubÏóêÏÑú PR ÏÉùÏÑ± (ÎòêÎäî CLI ÏÇ¨Ïö©):"
    echo -e "     ${GREEN}gh pr create --base ${BASE_BRANCH} --head ${feature_branch} \\${NC}"
    echo -e "     ${GREEN}  --title \"feat: Task ${task_id} - ${requirement:0:40}...\" \\${NC}"
    echo -e "     ${GREEN}  --body \"Closes #issue-number\"${NC}"
    echo -e ""
    echo -e "  ${YELLOW}3.${NC} Î¶¨Î∑∞ ÏäπÏù∏ ÌõÑ ${BASE_BRANCH}Ïóê Î®∏ÏßÄ"
    echo -e ""
    echo -e "  ${YELLOW}4.${NC} Îã§Ïùå Task Ïã§Ìñâ:"
    echo -e "     ${GREEN}git checkout ${BASE_BRANCH}${NC}"
    echo -e "     ${GREEN}git pull origin ${BASE_BRANCH}${NC}"
    echo -e "     ${GREEN}./main.sh${NC}"
    echo -e ""
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${CYAN}ÌòÑÏû¨ Î∏åÎûúÏπò: ${feature_branch}${NC}"
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e ""
}

# --- Î©îÏù∏ Î£®ÌîÑ ---
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë       TDD ÏûêÎèôÌôî ÏõåÌÅ¨ÌîåÎ°úÏö∞ v8.0 (ÏóêÏù¥Ï†ÑÌä∏ ÏûêÏú®)         ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

echo -e "\n${BLUE}üìã Îã§Ïùå TaskÎ•º Ï∞æÎäî Ï§ë...${NC}"

if ! TASK_BLOCK=$(find_next_task); then
    echo -e "${GREEN}üéâ Î™®Îì† Task ÏôÑÎ£å!${NC}"
    exit 0
fi

TASK_ID=$(echo "$TASK_BLOCK" | grep -o 'Task [0-9-]*' | head -1 | cut -d' ' -f2)
REQUIREMENT=$(echo "$TASK_BLOCK" | grep 'ÏöîÍµ¨ÏÇ¨Ìï≠:' | sed 's/.*ÏöîÍµ¨ÏÇ¨Ìï≠:[[:space:]]*"\?\([^"]*\)"\?.*/\1/')
TEST_DESC=$(echo "$TASK_BLOCK" | grep 'ÌÖåÏä§Ìä∏:' | sed 's/.*ÌÖåÏä§Ìä∏:[[:space:]]*//')

if [ -z "$TASK_ID" ] || [ -z "$REQUIREMENT" ]; then
    echo -e "${RED}‚ùå Task Ï†ïÎ≥¥ ÌååÏã± Ïã§Ìå® - PLAN.md ÌòïÏãù ÌôïÏù∏ ÌïÑÏöî${NC}"
    echo ""
    echo "Task Block:"
    echo "----------------------------------------"
    echo "$TASK_BLOCK"
    echo "----------------------------------------"
    echo ""
    echo "ÌååÏã± Í≤∞Í≥º:"
    echo "  TASK_ID: '${TASK_ID}'"
    echo "  REQUIREMENT: '${REQUIREMENT}'"
    echo ""
    exit 1
fi

echo -e "${YELLOW}üéØ Task ${TASK_ID}: ${REQUIREMENT}${NC}"
echo -e "   üß™ ÌÖåÏä§Ìä∏: ${TEST_DESC}"

# Feature Î∏åÎûúÏπò ÏÉùÏÑ±
create_feature_branch "$TASK_ID"

# TDD ÏÇ¨Ïù¥ÌÅ¥ Ïã§Ìñâ (ÏóêÏù¥Ï†ÑÌä∏ ÏûêÏú® Î™®Îìú - Í≤ΩÎ°ú ÏóÜÏù¥ Task IDÎßå Ï†ÑÎã¨)
echo -e "\n${CYAN}ü§ñ ÏóêÏù¥Ï†ÑÌä∏ ÏûêÏú® Í≤∞Ï†ï Î™®Îìú ÏãúÏûë${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  ÏóêÏù¥Ï†ÑÌä∏Í∞Ä ÌååÏùº Íµ¨Ï°∞ÏôÄ Í≤ΩÎ°úÎ•º Í≤∞Ï†ïÌï©ÎãàÎã§${NC}"
echo ""

if "$TDD_SCRIPT" "$REQUIREMENT" "$TASK_ID"; then
    echo -e "\n${GREEN}‚úÖ Task ${TASK_ID} ÏÑ±Í≥µ!${NC}"

    mark_task_complete "$TASK_ID"

    if ! git add . || ! git commit -m "feat(task-${TASK_ID}): ${REQUIREMENT}" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Git Ïª§Î∞ã Ïã§Ìå®${NC}"
        rollback_task_completion "$TASK_ID"
        exit 1
    fi

    show_pr_instructions "$TASK_ID" "$REQUIREMENT"
    exit 0
else
    echo -e "\n${RED}‚ùå Task ${TASK_ID} Ïã§Ìå®${NC}"
    exit 1
fi
